// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model techNeeds {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  buyKindNm         String? // 희망 구매 유형
  dmdtchNm          String? // 수요 기술명
  keyword           String[] // 키워드
  tchlgyIndcprDtl   String? // 기술 도입 목적
  tchlgyPccndCn     String? // 기술구매조건
  tcntrnFxamtTchfee String? // 기술이전 정액기술료
  tcntrnOrdnrTchfee String? // 기술이전 경상기술료
  tpDmandCdNm       String? // 권역명
}

model techMarketInfo {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  tcateNames String //과학기술소분류명
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model log {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createAt     DateTime? @default(now())
  userId       String?   @db.ObjectId
  counter      counter?  @relation(fields: [counterEmail], references: [email])
  counterEmail String?   @db.ObjectId
}

model counter {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  createAt DateTime? @default(now())
  userId   String?   @db.ObjectId
  log      log[]
}
