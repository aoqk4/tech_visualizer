// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model techNeeds {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  buyKindNm         String? // 희망 구매 유형
  dmdtchNm          String? // 수요 기술명
  keyword           String[] // 키워드
  tchlgyIndcprDtl   String? // 기술 도입 목적
  tchlgyPccndCn     String? // 기술구매조건
  tcntrnFxamtTchfee String? // 기술이전 정액기술료
  tcntrnOrdnrTchfee String? // 기술이전 경상기술료
  tpDmandCdNm       String? // 권역명
}

model techMarketInfo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  devStatusName String? // 개발 진행 상태
  indcateNamem  String? // 산업기술중분류명
  indcateNames  String? // 산업기술소분류명 
  kwrdDtl       String[] // 키워드
  slePc         String? // 판매가격
  sltchNm       String? // 판매기술명
  tcateNamem    String? // 과학기술중분류명
  tcateNames    String? //과학기술소분류명
}

// for User

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
